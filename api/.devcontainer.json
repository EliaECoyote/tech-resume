{
	"name": "api",
	// Update the 'dockerComposeFile' list if you have more compose files or use different names.
	"dockerComposeFile": [
		"../docker-compose.yml"
	],
	// The 'service' property is the name of the service for the container that VS Code should
	// use.
	"service": "api",
	// The optional 'workspaceFolder' property is the path VS Code should open by default when
	// connected. This is typically a file mount in .devcontainer/docker-compose.yml
	"workspaceFolder": "/home/node/app",
	// Use 'settings' to set *default* container specific settings.json values on container create. 
	// You can edit these settings after create using File > Preferences > Settings > Remote.
	"settings": {
		// This will ignore your local shell user setting for Linux since shells like zsh are typically 
		// not in base container images. You can also update this to an specific shell to ensure VS Code 
		// uses the right one for terminals and tasks. For example, /bin/bash (or /bin/ash for Alpine).
		"terminal.integrated.shell.linux": null,
		"editor.formatOnSave": true,
		"search.exclude": {
			"**/node_modules": true,
			"**/lib": true
		},
		"reason_language_server.autoRebuild": false
	},
	// Uncomment the next line to have VS Code connect as an existing non-root user in the container. See
	// https://aka.ms/vscode-remote/containers/non-root for details on adding a non-root user if none exist.
	"remoteUser": "root",
	// Uncomment the next line if you want start specific services in your Docker Compose config.
	// "runServices": [],
	// Uncomment the next line if you want to keep your containers running after VS Code shuts down.
	"shutdownAction": "none",
	// Uncomment the next line to run commands after the container is created - for example installing git.
	"postCreateCommand": "/bin/sh scripts/postCreateCommand.sh",
	// Add the IDs of extensions you want installed when the container is created in the array below.
	"extensions": [
		"jaredly.reason-vscode"
	]
}